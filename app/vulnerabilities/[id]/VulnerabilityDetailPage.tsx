'use client'

import { Badge } from '@/components/ui/badge'
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbSeparator,
} from '@/components/ui/breadcrumb'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import {
  formatCurrency,
  formatDate,
  getBadgeVariantForExploitType,
} from '@/lib/utils'
import { Vulnerability } from '@/types/markdown'
import { useQuery } from '@tanstack/react-query'
import matter from 'gray-matter'
import {
  AlertTriangle,
  Calendar,
  ChevronLeft,
  DollarSign,
  Shield,
  User,
  Users,
} from 'lucide-react'
import { useRouter } from 'next/navigation'
import { useEffect } from 'react'
import ReactMarkdown from 'react-markdown'
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'
import { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism'
// import { atomDark } from 'react-syntax-highlighter/dist/cjs/styles/prism'
import rehypeRaw from 'rehype-raw'

export default function VulnerabilityDetailPage({ id }: { id: number }) {
  const {
    data: vulnerability,
    error,
    isLoading,
  } = useQuery<Vulnerability | undefined>({
    queryKey: ['/api/vulnerabilities/' + id, id], // Unique key for this data fetch
    enabled: !isNaN(id),
  })
  const router = useRouter()

  useEffect(() => {
    console.log('vulnerability', vulnerability)
  }, [vulnerability])

  if (isLoading) {
    return (
      <div className='p-8'>
        <div className='flex items-center space-x-4 mb-8 animate-pulse'>
          <div className='h-8 w-32 bg-muted rounded'></div>
          <div className='h-8 w-48 bg-muted rounded'></div>
        </div>
        <div className='h-10 w-96 bg-muted rounded mb-6'></div>
        <div className='grid grid-cols-1 md:grid-cols-3 gap-6'>
          <div className='md:col-span-2 h-96 bg-muted rounded'></div>
          <div className='space-y-4'>
            <div className='h-40 bg-muted rounded'></div>
            <div className='h-40 bg-muted rounded'></div>
          </div>
        </div>
      </div>
    )
  }

  if (error || !vulnerability) {
    return (
      <div className='p-8'>
        <div className='flex flex-col items-center justify-center py-12 text-center'>
          <AlertTriangle className='h-16 w-16 text-destructive mb-4' />
          <h2 className='text-2xl font-bold mb-2'>Vulnerability Not Found</h2>
          <p className='text-muted-foreground mb-6'>
            The vulnerability you&apos;re looking for doesn&apos;t exist or has
            been removed.
          </p>
          <Button onClick={() => router.push('/vulnerabilities')}>
            <ChevronLeft className='mr-2 h-4 w-4' />
            Back to Vulnerabilities
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className='container max-w-7xl p-6'>
      {/* Breadcrumb navigation */}
      <Breadcrumb className='mb-6'>
        <BreadcrumbList>
          <BreadcrumbItem>
            <BreadcrumbLink href='/'>Home</BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbSeparator />
          <BreadcrumbItem>
            <BreadcrumbLink href='/vulnerabilities'>
              Vulnerabilities
            </BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbSeparator />
          <BreadcrumbItem>
            <BreadcrumbLink>{vulnerability.protocol}</BreadcrumbLink>
          </BreadcrumbItem>
        </BreadcrumbList>
      </Breadcrumb>

      {/* Header with actions */}
      <div className='flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4'>
        <div>
          <h1 className='text-3xl font-bold tracking-tight'>
            {vulnerability.title}
          </h1>
          <p className='text-muted-foreground'>
            {vulnerability.protocol} |{vulnerability.protocolType} |{' '}
            {formatDate(vulnerability.exploitDate)}
          </p>
        </div>
        <div className='flex gap-2'>
          <Button
            variant='outline'
            onClick={() => router.push('/vulnerabilities')}
          >
            <ChevronLeft className='mr-2 h-4 w-4' />
            Back
          </Button>
          {/* <Button
            variant='default'
            onClick={() =>
              setLocation(`/vulnerabilities/${vulnerability.id}/edit`)
            }
          >
            <Edit className='mr-2 h-4 w-4' />
            Edit
          </Button> */}
        </div>
      </div>

      {/* Status badge */}
      {vulnerability.status && vulnerability.status !== 'published' && (
        <div className='mb-6'>
          <Badge
            variant={
              vulnerability.status === 'draft'
                ? 'outline'
                : vulnerability.status === 'pending_review'
                ? 'secondary'
                : 'destructive'
            }
            className='text-sm'
          >
            {vulnerability.status.replace('_', ' ').toUpperCase()}
          </Badge>
        </div>
      )}

      {/* Main content layout */}
      <div className='grid grid-cols-1 md:grid-cols-3 gap-6'>
        {/* Main content area */}
        <div className='md:col-span-2 space-y-6'>
          {/* Markdown content */}
          <Card>
            <CardContent className='pt-6 markdown'>
              {/* <ReactMarkdown
                rehypePlugins={[rehypeRaw]}
                components={{
                  code({ className, children, ...props }) {
                    const match = /language-(\w+)/.exec(className || '')
                    const inline = !match
                    return !inline && match ? (
                      <SyntaxHighlighter
                        style={atomDark as any}
                        language={match[1]}
                        PreTag='div'
                        {...props}
                      >
                        {String(children).replace(/\n$/, '')}
                      </SyntaxHighlighter>
                    ) : (
                      <code className={className} {...props}>
                        {children}
                      </code>
                    )
                  },
                }}
              >
                {matter(mkDemo?.trim()).content}
              </ReactMarkdown> */}

              {vulnerability.contentMarkdown ? (
                <div className='prose prose-invert max-w-none'>
                  <ReactMarkdown
                    rehypePlugins={[rehypeRaw]}
                    components={{
                      code({ className, children, style, ref, ...props }) {
                        const match = /language-(\w+)/.exec(className || '')
                        const inline = !match
                        return !inline && match ? (
                          <SyntaxHighlighter
                            style={atomDark}
                            language={match[1]}
                            PreTag='div'
                            {...props}
                          >
                            {String(children).replace(/\n$/, '')}
                          </SyntaxHighlighter>
                        ) : (
                          <code className={className} {...props}>
                            {children}
                          </code>
                        )
                      },
                    }}
                  >
                    {/* {vulnerability.contentMarkdown} */}
                    {matter(vulnerability.contentMarkdown).content}
                  </ReactMarkdown>
                </div>
              ) : (
                <div className='prose prose-invert max-w-none'>
                  <h2>Technical Details</h2>
                  <p>
                    {vulnerability.technique ||
                      'No detailed information available.'}
                  </p>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Review comments if any */}
          {/* {vulnerability.reviewComments && (
          <Card>
            <CardHeader>
              <CardTitle className='flex items-center'>
                <FileText className='h-5 w-5 mr-2 text-muted-foreground' />
                Review Comments
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className='p-4 border rounded-md bg-muted/50'>
                <p className='italic'>{vulnerability.reviewComments}</p>
                <p className='italic'>This is a comment</p>
              </div>
            </CardContent>
          </Card>
          )} */}
        </div>

        {/* Sidebar */}
        <div className='space-y-6'>
          {/* Key information */}
          <Card>
            <CardHeader>
              <CardTitle>Exploit Information</CardTitle>
            </CardHeader>
            <CardContent className='space-y-4'>
              <div>
                <p className='text-sm font-medium text-muted-foreground mb-1 flex items-center'>
                  <DollarSign className='h-4 w-4 mr-1' /> Amount Stolen
                </p>
                <p className='text-lg font-bold'>
                  {formatCurrency(vulnerability.amountStolen)}
                </p>
              </div>

              <div>
                <p className='text-sm font-medium text-muted-foreground mb-1 flex items-center'>
                  <Calendar className='h-4 w-4 mr-1' /> Exploit Date
                </p>
                <p>{formatDate(vulnerability.exploitDate)}</p>
              </div>

              <div>
                <p className='text-sm font-medium text-muted-foreground mb-1 flex items-center'>
                  <Shield className='h-4 w-4 mr-1' /> Exploit Type
                </p>
                <Badge
                  variant={getBadgeVariantForExploitType(
                    vulnerability.exploitType
                  )}
                >
                  {vulnerability.exploitType}
                </Badge>
              </div>

              <div>
                <p className='text-sm font-medium text-muted-foreground mb-1'>
                  Technique
                </p>
                <p>{vulnerability.technique}</p>
              </div>
            </CardContent>
          </Card>

          {/* Audit information */}
          <Card>
            <CardHeader>
              <CardTitle>Audit Status</CardTitle>
            </CardHeader>
            <CardContent>
              <p className='text-sm font-medium text-muted-foreground mb-1'>
                Audited By
              </p>
              <p>{vulnerability.auditor || 'Unaudited'}</p>
            </CardContent>
          </Card>

          {/* Contributors */}
          <Card>
            <CardHeader>
              <CardTitle className='flex items-center'>
                <Users className='h-5 w-5 mr-2 text-muted-foreground' />
                Contributors
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className='space-y-3'>
                {/* Author */}
                {/* <div className='flex items-center space-x-3'>
                  <div className='bg-primary/10 p-2 rounded-full'>
                    <User className='h-5 w-5 text-primary' />
                  </div>
                  <div>
                    <p className='font-medium'>
                      {vulnerability.collaborators[0]?.username}
                    </p>
                    <p className='text-xs text-muted-foreground'>Author</p>
                  </div>
                </div> */}

                {/* <Separator /> */}

                {/* Collaborators */}
                {vulnerability.contributors &&
                vulnerability.contributors.length > 0 ? (
                  <div className='space-y-3'>
                    {vulnerability.contributors.map((colab) => (
                      <div
                        key={colab.username}
                        className='flex items-center space-x-3'
                      >
                        <div className='bg-secondary/10 p-2 rounded-full'>
                          <User className='h-5 w-5 text-secondary' />
                        </div>
                        <div>
                          {/* <p className='font-medium'>{colab.username}</p> */}
                          <a
                            href={colab?.url}
                            target='_blank'
                            rel='noopener noreferrer'
                            className='text-secondary hover:underline'
                          >
                            {colab?.username}
                          </a>
                          <p className='text-xs text-muted-foreground'>
                            Collaborator
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className='text-muted-foreground text-sm'>
                    No additional collaborators
                  </p>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
