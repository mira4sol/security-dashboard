import { Button } from '@/components/ui/button'
import { Skeleton } from '@/components/ui/skeleton'
import { formatCurrency } from '@/lib/utils'
import { useState } from 'react'
import { RiArrowDownLine, RiArrowUpLine } from 'react-icons/ri'
import VulnerabilityRow from './VulnerabilityRow'
import { Vulnerability } from '@/types/markdown'

interface VulnerabilityTableProps {
  onView: (vulnerability: Vulnerability) => void
  data: Vulnerability[]
  isLoading: boolean
  error: Error | null
}

const VulnerabilityTable = ({
  onView,
  data,
  isLoading,
  error,
}: VulnerabilityTableProps) => {
  const [sortField, setSortField] =
    useState<keyof Vulnerability>('amountStolen')
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc')
  const [currentPage, setCurrentPage] = useState(1)
  const itemsPerPage = 10

  // const { data, isLoading, error } = useQuery<Vulnerability[]>({
  //   queryKey: ['vulnerabilities'], // Unique key for this data fetch
  //   queryFn: async () => {
  //     const data = await getVulnerabilities()
  //     return data
  //   },
  // })

  const handleSort = (field: keyof Vulnerability) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')
    } else {
      setSortField(field)
      setSortDirection('asc')
    }
  }

  const sortedData = data
    ? [...data].sort((a, b) => {
        if (sortField === 'amountStolen') {
          return sortDirection === 'asc'
            ? a.amountStolen - b.amountStolen
            : b.amountStolen - a.amountStolen
        } else if (sortField === 'exploitDate') {
          return sortDirection === 'asc'
            ? new Date(a.exploitDate).getTime() -
                new Date(b.exploitDate).getTime()
            : new Date(b.exploitDate).getTime() -
                new Date(a.exploitDate).getTime()
        }
        return 0
      })
    : []

  const totalItems = sortedData.length
  const totalPages = Math.ceil(totalItems / itemsPerPage)

  const paginatedData = sortedData.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  )

  const totalFundsStolen =
    data?.reduce((sum, item) => sum + item.amountStolen, 0) || 0

  if (error) {
    return <div className='text-destructive'>Error loading vulnerabilities</div>
  }

  return (
    <div className='bg-card rounded-lg border border-border overflow-hidden'>
      <div className='p-4 border-b border-border flex justify-between items-center'>
        <h2 className='font-mono font-bold'>Exploits</h2>

        <div className='flex items-center gap-4'>
          <div className='text-primary text-xs font-mono py-1 px-3 rounded-full flex items-center gap-2'>
            <span className='h-2 w-2 bg-primary rounded-full animate-pulse'></span>
            <span>
              {isLoading ? (
                <Skeleton className='h-4 w-20' />
              ) : (
                `${formatCurrency(totalFundsStolen)} hacked across ${
                  data?.length || 0
                } Protocols`
              )}
            </span>
          </div>
        </div>
      </div>

      <div className='overflow-x-auto'>
        <table className='w-full'>
          <thead>
            <tr className='text-left bg-muted text-gray-400 text-xs'>
              <th className='font-mono font-medium py-3 px-4'>protocol</th>
              <th
                className='font-mono font-medium py-3 px-4 cursor-pointer'
                onClick={() => handleSort('exploitDate')}
              >
                ðŸ“… date{' '}
                {sortField === 'exploitDate' ? (
                  sortDirection === 'asc' ? (
                    <RiArrowUpLine className='inline-block ml-1' />
                  ) : (
                    <RiArrowDownLine className='inline-block ml-1' />
                  )
                ) : (
                  <RiArrowDownLine className='inline-block ml-1' />
                )}
              </th>
              <th
                className='font-mono font-medium py-3 px-4 cursor-pointer'
                onClick={() => handleSort('amountStolen')}
              >
                $ stolen{' '}
                {sortField === 'amountStolen' ? (
                  sortDirection === 'asc' ? (
                    <RiArrowUpLine className='inline-block ml-1' />
                  ) : (
                    <RiArrowDownLine className='inline-block ml-1' />
                  )
                ) : (
                  <RiArrowDownLine className='inline-block ml-1' />
                )}
              </th>
              <th className='font-mono font-medium py-3 px-4'>exploit type</th>
              <th className='font-mono font-medium py-3 px-4'>technique</th>
              <th className='font-mono font-medium py-3 px-4'>audited by</th>
              {/* <th className='font-mono font-medium py-3 px-4'>actions</th> */}
            </tr>
          </thead>
          <tbody className='divide-y divide-border'>
            {isLoading ? (
              Array(5)
                .fill(0)
                .map((_, index) => (
                  <tr key={index}>
                    <td colSpan={7} className='py-4 px-4'>
                      <Skeleton className='h-10 w-full' />
                    </td>
                  </tr>
                ))
            ) : paginatedData.length === 0 ? (
              <tr>
                <td colSpan={7} className='py-8 text-center text-gray-400'>
                  No vulnerabilities found
                </td>
              </tr>
            ) : (
              paginatedData.map((vulnerability) => (
                <VulnerabilityRow
                  key={vulnerability.id}
                  vulnerability={vulnerability}
                  onView={() => onView(vulnerability)}
                />
              ))
            )}
          </tbody>
        </table>
      </div>

      {totalPages > 1 && (
        <div className='p-4 border-t border-border flex justify-between items-center'>
          <div className='text-sm text-gray-400'>
            Showing {Math.min((currentPage - 1) * itemsPerPage + 1, totalItems)}{' '}
            to {Math.min(currentPage * itemsPerPage, totalItems)} of{' '}
            {totalItems} exploits
          </div>

          <div className='flex items-center gap-2'>
            <Button
              variant='terminal'
              size='sm'
              onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
              disabled={currentPage === 1}
            >
              Previous
            </Button>

            {Array.from({ length: totalPages }).map((_, index) => (
              <Button
                key={index}
                variant={currentPage === index + 1 ? 'secondary' : 'terminal'}
                size='sm'
                onClick={() => setCurrentPage(index + 1)}
              >
                {index + 1}
              </Button>
            ))}

            <Button
              variant='terminal'
              size='sm'
              onClick={() =>
                setCurrentPage((prev) => Math.min(prev + 1, totalPages))
              }
              disabled={currentPage === totalPages}
            >
              Next
            </Button>
          </div>
        </div>
      )}
    </div>
  )
}

export default VulnerabilityTable
